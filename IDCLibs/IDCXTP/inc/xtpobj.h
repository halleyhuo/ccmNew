/*####################################################################################################################*/
/*                                                                                                                    */
/*                                              Includes for XTP-Objects                                              */
/*                                                                                                                    */
/*####################################################################################################################*/
/*                                                                                                                    */
/*                             Contains all defines and data structures which are used for                            */
/*                                                 XTP-Communication.                                                 */
/*                       The structure of the objects does not include the header of the object.                      */
/*                                          Programming language: C ( ANSI )                                          */
/*                                                                                                                    */
/*####################################################################################################################*/
/*                                                                                                                    */
/*                                                 FILENAME: xtpobj.h                                                 */
/*                                       FISRT CREATE: 2017-03-26                                                     */
/*                                                                                                                    */
/*####################################################################################################################*/


#ifndef XTPOBJ_H_
#define XTPOBJ_H_
#ifdef _WINDOWS
#include "portabnt.h"
#else
#include "IDCType.h"
#endif
#define XTP_MODE_BROADCAST   0x00          /* the object can be received by all targets which have it in their inlist */
#define XTP_MODE_DIRECT      0x01          /* the object is sent only to the target directly addressed */
#define XTP_MODE_SYSTEM      0x02          /* only of messages (objects) generated by XTP Server */
#define XTP_MODE_MANAGE      0x03          /* Objects only used by Manage */



#ifdef _WINDOWS
#define XTP_DEF_PACKED

typedef unsigned char ENUM8;
#define ID_UPDATA_LIST_BOX       (WM_USER+101)
#else
#define XTP_DEF_PACKED __attribute__ ((packed))  
#endif
#ifdef _WINDOWS
#pragma pack (push, 1)
#endif
//PC->Target
const ushort ExtID_Manager  = 0x1001;
const ushort ExtID_SimuSend = 0x1010;

//Target->PC
const ushort ExtID_ObjFlow_Info = 0x1101;
const ushort ExtID_SimuOperate  = 0x1102;
const ushort ExtID_XtpStatus    = 0x1103;

typedef ushort XTP_MAN_TYPE;
const XTP_MAN_TYPE SIMU_IP_SET = 10;
typedef struct  
{
	ulong  SimuIp;
	ushort SimuPort;
}XTP_DEF_PACKED SIMU_IP_SET_t;


typedef struct
{
	ushort ExtID;
	ushort FrameLen;
} XTP_DEF_PACKED Comm_XTP_ExtHeader;

typedef struct
{
	ushort ExtID;
	ushort FrameLen;
	char  data[256];
} XTP_DEF_PACKED Comm_XTP_Ext;

typedef struct
{
    ushort length; //contain the header length, i.e. the minimal lenght of XTP telegram is 8. Max value is 1032
    ushort telID;
    uchar  sender;
    uchar  target;
    uchar  mode;
    uchar  dummy;
}XTP_DEF_PACKED tXtpObjHeader;

#define MAX_XTP_DATA_LENGTH 1024
#define MAX_XTP_OBJ_LENGTH  1032

#define XTP_NODE_MASTER             0x10
#define XTP_NODE_COLLIMATOR_CONTROL 0x20
#define XTP_NODE_GENERATOR          0x30
#define XTP_NODE_TUI_ADAPTER        0x70
#define XTP_NODE_TUI_1              0x71
#define XTP_NODE_IS                 0x80

/******************** Const Value Definition  ********************************/
typedef ENUM8 ColBladeType;
const ColBladeType ColBladeHeight = 1;
const ColBladeType ColBladeWidth  = 2;

typedef ENUM8 moveStatusType;
const moveStatusType moveStatusMoving    = 1;
const moveStatusType moveStatusTargetRea = 2;
const moveStatusType moveStatusErr       = 3;


typedef ENUM8 XRAYStatus;
const XRAYStatus XRayIdle   = 0;
const XRAYStatus XRayFluoro = 1;//In Fluoro
const XRAYStatus XRayAcq    = 2;//In ACQ
const XRAYStatus XRayFlAcq  = 3;//Both in Fluoro & Acq

typedef ENUM16 UI_SEL_FUNC_TYPE;

const UI_SEL_FUNC_TYPE UI_SEL_CollimatorHeight = 0x0101;
const UI_SEL_FUNC_TYPE UI_SEL_CollimatorWeight = 0x0102;
const UI_SEL_FUNC_TYPE UI_SEL_Kv               = 0x0201;
const UI_SEL_FUNC_TYPE UI_SEL_mA               = 0x0202;
const UI_SEL_FUNC_TYPE UI_SEL_mAs              = 0x0203;
const UI_SEL_FUNC_TYPE UI_SEL_DoseLevel        = 0x0204;
const UI_SEL_FUNC_TYPE UI_SEL_DoseRegulation   = 0x0205;
const UI_SEL_FUNC_TYPE UI_SEL_DoseFocus        = 0x0206;
const UI_SEL_FUNC_TYPE UI_SEL_Mode             = 0x0210;

const UI_SEL_FUNC_TYPE UI_SEL_FLMode           = 0x0211;
const UI_SEL_FUNC_TYPE UI_SEL_Fps              = 0x0212;

const UI_SEL_FUNC_TYPE UI_SEL_Tubeload         = 0x0213;  //tube load display

typedef ENUM8 UI_Widget_STATUS;
const UI_Widget_STATUS UI_Widget_NotSelectable = 0; //Widget is shown without selectable
const UI_Widget_STATUS UI_Widget_Selectable    = 1; //Widget is shown, can be select
const UI_Widget_STATUS UI_Widget_Hidden        = 2; //Widget is Hidden
const UI_Widget_STATUS UI_Widget_ReadOnly      = 3; //Read only Widget.

#define MAX_UI_SHOW_SIZE 64


#define SCONNECT 0x0002 /* Object-ID */

typedef struct
{
    ushort        no_objects;       /* number of objects */
} XTP_DEF_PACKED sconnect_t1;

typedef struct
{
    ushort          object_id; /* ID of the object */
} XTP_DEF_PACKED sconnect_t2;

#define TURN_ON 0x0003

#define ICOLBLADEPOS 0x0103
typedef struct
{
	ColBladeType   type;
	moveStatusType status;
	ushort         pos;
	ushort         rotationAng;//reserved for future use	
}XTP_DEF_PACKED IColBlade;

typedef struct
{
	ushort count;
}XTP_DEF_PACKED BladeCount;

typedef struct 
{
	tXtpObjHeader header;
	BladeCount    cnt;
	IColBlade     blade[12];
}XTP_DEF_PACKED IColBladeFrame_t;


#define ICOMPSTATUS 0x0051
typedef ENUM8 CompStatusType;
const CompStatusType CompStatusHardwareBootup = 0x01;
const CompStatusType CompStatusConnect        = 0x02;
const CompStatusType CompStatusOperational    = 0x10;
const CompStatusType CompStatusError          = 0x21;

enum GenCompStates { 
	Gen_IDLE = 0,
	Gen_START,
	Gen_INIT,
	Gen_SBY,
	Gen_EXPOSURE,
	Gen_ERROR
};
typedef struct
{
    uchar          compNodeID;
    CompStatusType status;
    ushort         addtionalInfo;
}XTP_DEF_PACKED icompstatus_t;

typedef struct 
{
	tXtpObjHeader header;
	icompstatus_t data;
}XTP_DEF_PACKED ICompStatusFrame;


//searchrun feedback
#define ICOLLSEARCHRUN 0x0104
typedef struct
{
	moveStatusType status;
	uchar          dummy1;
	uchar          dummy2;
	uchar          dummy3;
}XTP_DEF_PACKED iCollSearchRun_t;

#define IGENREADY 0x0207
const ENUM8 GeneratorReadyforAcq   = 1;
const ENUM8 GenServiceSwitcherWork = 1;
const ENUM8 TubeStatusWork         = 1;
const ENUM8 DoorStatusOK           = 1;
typedef struct 
{
	ENUM8 GeneratorReady;//1 is ready, other code is why not ready
	ENUM8 ServiceSwitcher;//1 is all service Switcher in work mode.
	ENUM8 TubeStatus;     //1 is Tube in Normal Work
	ENUM8 DoorStatus;     //1 is Door is OK for Exposure
}XTP_DEF_PACKED IGenReady;

typedef struct 
{
	tXtpObjHeader header;
	IGenReady data;
}XTP_DEF_PACKED IGenReadyFrame_t;

#define ISIDINFO 0x0102
typedef struct
{
	ushort sid;
	uchar  dummy1;
	uchar  dummy2;
}XTP_DEF_PACKED ISidInfo;

#define IUISHOW 0x0206

typedef struct 
{
	ushort obj_count; //<MAX_UI_SHOW_SIZE
}XTP_DEF_PACKED iUiShowObjCnt;

typedef struct 
{
	UI_SEL_FUNC_TYPE sel_func;
	ushort           param;
	UI_Widget_STATUS status;
	uchar            dummy;
}XTP_DEF_PACKED iUiShowObj;

typedef struct 
{
	tXtpObjHeader header;
	iUiShowObjCnt objCnt;
	iUiShowObj    uiShowObj[MAX_UI_SHOW_SIZE];
}XTP_DEF_PACKED iUiShowFrame_t;
	

#define IXRAY 0x0205
typedef struct 
{
	XRAYStatus     status;
	uchar          dummy1;
	uchar          dummy2;
	uchar          dummy3; 
	ulong          acqIndex;
}XTP_DEF_PACKED IXray_t;

#define SOPERATEMODE 0x0061

#define ISYSTEMINFO 0x0062
typedef struct
{
    uchar systemNr;
    uchar systemStatus;
    uchar reserved1;
    uchar reserved2;
}XTP_DEF_PACKED isysteminfo_t;

#define SXRAYCONTROL 0x0201
typedef ENUM8 ConsoleType; //Indicates the Type of Console.
const ConsoleType ConsoleFootPedel   = 5;
const ConsoleType ConsoleMainTouchConsole = 6;


const ConsoleType ConsoleEmulation   = 10;//comes from Software Emulation
typedef struct
{
	ConsoleType consoleType;
	uchar       fluoroscopy;
	uchar       preContact;
	uchar       hk;
}XTP_DEF_PACKED SXRayControl;

#define SFLDATA 0x0210
typedef ENUM8 FlType;
const FlType FlContinue       = 1;
const FlType FlSingle         = 4;
const FlType FlPulse          = 8;
const FlType FlSupervision    = 16;
const FlType FlRoadMap        = 32;

const ushort DoseLevelLow    = 1;
const ushort DoseLevelMiddle = 2;
const ushort DoseLevelHigh   = 3;

//Error Log for components
#define IERRORINFO 0x0071

#define ADDITIONAL_ERR_INFO_SIZE 32
typedef struct
{
	ushort	ErrorNum;
	schar	ErrPrio;
	uchar   dummy;
	char	message[ADDITIONAL_ERR_INFO_SIZE];
}XTP_DEF_PACKED iErrorInfo;


//SFlData for Fluoro Programming Data Setting; 
//from Image System to XCU
typedef struct
{
	FlType FlMode; 
	uchar  FlCurverNo;
	ushort DoseLevel; //1,2,3 for Low, Middle, High
	ushort kv;        //unit is 0.01mA
	ushort ma;
	ushort mas;
	ushort Fps; //5, 10, 20, 30, 50, 75, 100, 150 for 0.5, 1, 2, 3, 5, 7.5, 10, and 15 pulse(s)/s; 0 for Continue FL
	uchar  focus; // 1 for small focus; 2 for large focus
	uchar  RegulationInfo;//0 indicate Reguation Stop. 0xFF indicates always regualtion; other number indicates the regulation Frame count.
	ushort ScenseTime;	// Scense of FL, check if IS can realize it or not
}XTP_DEF_PACKED SFlData;
/*
typedef struct _GenVdData
{
	FlType		flMode;
	ushort		kv;
	ushort		ma;
	ushort		mas;
	ushort		fps;
	ushort		tMax;
	uchar		focus;
}XTP_DEF_PACKED GenVdData;
*/
//iFlData for acknowledge of Fluoro Programming Data
//from XCU to the displaying ( Image System, TUI)
#define IFLDATA 0x0220
typedef struct
{
	FlType FlMode; 
	uchar  FlCurverNo;
	ushort DoseLevel;  //1,2,3 for Low, Middle, High
	ushort kv;
	ushort ma;
	ushort mas;
	ushort Fps; //5, 10, 20, 30, 50, 75, 100, 150 for 0.5, 1, 2, 3, 5, 7.5, 10, and 15 pulse(s)/s; 0 for Continue FL
	uchar  focus; // 1 for small focus; 2 for large focus
	uchar  RegulationInfo;//0 indicate Reguation Stop. 0xFF indicates always regualtion; other number indicates the regulation Frame count.
	ushort ScenseTime;	// Scense of FL, check if IS can realize it or not
}XTP_DEF_PACKED iFlData;

typedef struct 
{
	tXtpObjHeader header;
	iFlData       data;
}XTP_DEF_PACKED IFlDataFrame_t;


//SGENData for Generator Data Setting; 
//from XCU to GEN_VD
#define SGENDATA 0x212
typedef struct
{
	FlType FlMode; 
	ushort kv;     //in [0.1 kV]
	ushort ma;     // in [0.01 mA]
	ushort mas;    // in [0.01 mAs]
	ushort Tmax;  //from configuration file, 34ms for siemens GEN in [0.1 ms]
	ushort Fps; //5, 10, 20, 30, 50, 75, 100, 150 for 0.5, 1, 2, 3, 5, 7.5, 10, and 15 pulse(s)/s; 0 for Continue FL
	uchar  focus; // 1 for small focus; 2 for large focus
}XTP_DEF_PACKED SGENData;

typedef struct 
{
	tXtpObjHeader header;
	SGENData      data;
}XTP_DEF_PACKED SGENDataFrame_t;


//iGENDataData for acknowledge of Generator Data
//from GEN_VD to XCU
#define IGENDATA 0x0222
typedef struct
{
	FlType FlMode; 
	ushort kv;
	ushort ma;
	ushort mas;
	ushort Tmax; //from configuration file, 34ms for siemens GEN
	ushort Fps; //5, 10, 20, 30, 50, 75, 100, 150 for 0.5, 1, 2, 3, 5, 7.5, 10, and 15 pulse(s)/s; 0 for Continue FL
	uchar  focus; // 1 for small focus; 2 for large focus
}XTP_DEF_PACKED iGENData;

typedef struct
{
	tXtpObjHeader header;
	iGENData	data;
}XTP_DEF_PACKED IGENData_t;

//iAcqData for actual exposure data 
//from GEN_VD to displaying (Image System or TUI)
#define IACQDATA 0x0213
typedef struct
{
	ushort kv;
	ushort ma;
	ushort mas;
	ushort ms; 
	ulong  acqIndex;
}XTP_DEF_PACKED iAcqData;

typedef struct
{
	tXtpObjHeader header;
	iAcqData	data;
}XTP_DEF_PACKED IAcqData_t;

#define SFLCMD 0x0211
typedef ENUM8 FLCmdType;
const FLCmdType FLCmdStop   = 0; //Host -> Generator VD, Trigger Source(Strawberry Pi, IS), to Stop Fluoro
const FLCmdType FLCmdActive = 1; //Host -> Generator VD, to active Fluoro
const FLCmdType FLCmdStart  = 2; //Host -> Generator VD, Trigger Source(Strawberry Pi, IS), to Start Fluoro

typedef struct
{
	FLCmdType cmd;
	uchar     dummy;
	ushort    FlFps;//0 indicates Continue Fl, 150 indicates 15 fps, 75 indicates 7.5 fps
}XTP_DEF_PACKED SFlCmd;

typedef struct
{
	tXtpObjHeader   header;
	SFlCmd          data;
}XTP_DEF_PACKED SFlCmdFrame_t;

#define SCOLBLADEPOS 0x0101
typedef struct
{
	ColBladeType type;
	ushort       pos;
	ushort       rotationAng;//reserved for future use	
}XTP_DEF_PACKED SColBlade;

typedef struct 
{
	ushort    cnt;
	SColBlade blade[12];
}XTP_DEF_PACKED SColBladeGrp;

typedef struct 
{
	tXtpObjHeader header;
	SColBladeGrp  data;
}XTP_DEF_PACKED SColBladeFrame_t;


#define SGENERALCMD 0x0105


typedef uchar ControlElementType; //Indicates the Type of Control ELement.
const ControlElementType ON_OFF_BUTTON           = 1; 
const ControlElementType PUSH_BUTTON             = 2;
const ControlElementType PLUS_MINUS_BUTTON       = 3;
const ControlElementType SELECTION_BUTTON        = 4;
const ControlElementType ON_OFF_LEVEL_BUTTON     = 5; 
const ushort ON_OFF_LEVEL_PRESS                  = 0x5555;
const ushort ON_OFF_LEVEL_RELEASE                = 0;

const ControlElementType POTENTIONMETER_BUTTON   = 6;

typedef ENUM16 FunctionCode;
//function code: 1 for fluoro mode;
// 2 for kV; 3 for mA; 4 for mAs;
// 5 for fluoro curver; 6 for fps;
// 7 for regulation stop;
const FunctionCode FuncFluoroMode    = 1;
const FunctionCode FuncKVSel         = 2;
const FunctionCode FuncmASel         = 3;
const FunctionCode FuncmAsSel        = 4;
const FunctionCode FuncFlCurver      = 5;
const FunctionCode FuncFlFPS         = 6;
const FunctionCode FuncRegulationStop= 7;
const FunctionCode FuncSingleMode    = 8;
const FunctionCode FuncAcqFluoro     = 11;


const FunctionCode MainFootPedelLft  = 101;
const FunctionCode MainFootPedelRht  = 102;
const FunctionCode CArmLiftUp        = 110;
const FunctionCode CArmLiftDn        = 111;
typedef struct
{
	ConsoleType 	   consoleType;
	ControlElementType controlElementType;
	FunctionCode       functionCode;
	ushort             param;
	uchar              dummy[2];
}XTP_DEF_PACKED SGeneralCmd;

typedef struct
{
	tXtpObjHeader   header;
	SGeneralCmd     data;
}XTP_DEF_PACKED SGeneralCmdFrame_t;

const ushort UICMD_ColHeight = 0x0010;
const ushort UICMD_ColWidth  = 0x0011;
const ushort UICMD_EXP_PLUS  = 0x0101;
const ushort UICMD_EXP_MINUS = 0x0102;
const ushort UICMD_FPS_CHANGE = 0x0103;
const ushort UICMD_SNGL_MODE	= 0x0104;
const ushort UICMD_FLUORO_MODE	= 0x105;

const sshort UICMD_PARAM_MINUS = 4;
const sshort UICMD_PARAM_PLS   = 2;

#define SUICMD 0x0230

typedef struct 
{
	ushort 			   cmd;
	ControlElementType type;
	sshort 			   param;
	uchar              dummy[3];
}XTP_DEF_PACKED SUiCmd;

typedef struct
{
	tXtpObjHeader   header;
	SUiCmd          data;
}XTP_DEF_PACKED SUiCmdFrame_t;

#define ITUBELOAD 0x0215
typedef struct
{
    ushort        tubeload;   //tube load percentage; [0.1%]
    ushort        waittime;   //waiting time for tube cooling; [s]
}XTP_DEF_PACKED iTubeLoad;

typedef struct
{
    tXtpObjHeader   header;
    iTubeLoad       data;
}XTP_DEF_PACKED iTubeLoad_t;


#define IWSDOSEINFO	0x0233

typedef struct
{
	ushort				doseValue;
	ulong				index;
}XTP_DEF_PACKED IwsDoseInfo;

typedef struct
{
	tXtpObjHeader	header;
	IwsDoseInfo		iwsDoseInfo;
} IwsDoseInfoFrame_t;



#ifdef _WINDOWS
#pragma pack (pop)
#endif 

#define SYS_OK 1

#endif /* XTPOBJ_H_ */
